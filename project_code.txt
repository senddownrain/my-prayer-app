
### package.json
```
{
  "name": "my-prayer-app",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "export-code": "node export-code.js",
    "db:seed": "node seed-db.js"
  },
  "dependencies": {
    "@mdi/font": "^7.4.47",
    "@tiptap/extension-color": "^3.0.7",
    "@tiptap/extension-text-align": "^3.0.9",
    "@tiptap/extension-text-style": "^3.0.7",
    "@tiptap/pm": "^3.0.7",
    "@tiptap/starter-kit": "^3.0.7",
    "@tiptap/vue-3": "^3.0.7",
    "firebase": "^10.12.2",
    "pinia": "^3.0.3",
    "vue": "^3.4.27",
    "vue-i18n": "^11.1.11",
    "vue-router": "^4.3.3",
    "vuetify": "^3.6.8"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.5",
    "vite": "^5.2.13",
    "vite-plugin-pwa": "^0.20.5",
    "vite-plugin-vuetify": "^2.0.3"
  }
}

```

### vite.config.js
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { VitePWA } from 'vite-plugin-pwa'
// ✅ 1. Импортируем утилиты для работы с путями из Node.js
import { fileURLToPath, URL } from 'node:url'

export default defineConfig({
  plugins: [
    vue(),
    VitePWA({
      // ... секция PWA остается без изменений ...
    })
  ],
  resolve: {
    alias: {
      // ✅ 2. Используем НОВЫЙ синтаксис для определения псевдонима '@'
      '@': fileURLToPath(new URL('./src', import.meta.url))
    },
  },
})
```

### src/App.vue
```
<template>
  <v-app :theme="settings.currentTheme">
    <!-- ✅ НАВИГАЦИОННОЕ МЕНЮ -->
    <v-navigation-drawer v-model="isDrawerOpen" temporary>
      <v-list nav>
        <v-list-item 
          prepend-icon="mdi-format-list-text" 
          :title="$t('allPrayers')"
          @click="navigateToCategory(null)"
        ></v-list-item>
        
        <v-divider></v-divider>
        <v-list-subheader>Категории</v-list-subheader>
        
        <v-list-item
          v-for="category in settings.menuCategories"
          :key="category.name"
          prepend-icon="mdi-label-outline"
          :title="category.name"
          @click="navigateToCategory(category.tag)"
        ></v-list-item>

        <v-divider></v-divider>

        <v-list-item 
          prepend-icon="mdi-cog-outline" 
          :title="$t('settings')"
          :to="{ name: 'Settings' }"
        ></v-list-item>
        <v-list-item 
          prepend-icon="mdi-information-outline" 
          title="О нас"
          :to="{ name: 'About' }"
        ></v-list-item>
         <v-list-item 
          prepend-icon="mdi-shield-crown-outline" 
          title="Админка"
          :to="{ name: 'Admin' }"
        ></v-list-item>
      </v-list>
    </v-navigation-drawer>

    <!-- ✅ ОБНОВЛЕННЫЙ APPBAR -->
    <v-app-bar :elevation="2" app>
      <!-- Либо кнопка меню, либо кнопка "назад" -->
      <v-app-bar-nav-icon v-if="appBar.isMenu" @click="isDrawerOpen = !isDrawerOpen"></v-app-bar-nav-icon>
      <v-btn v-else icon="mdi-arrow-left" @click="router.back()"></v-btn>
      
      <v-toolbar-title>{{ appBar.title }}</v-toolbar-title>
      <v-spacer></v-spacer>
      <!-- Кнопки действий остаются как были -->
      <v-btn v-for="action in appBar.actions" :key="action.icon" icon @click="action.onClick"></v-btn>
    </v-app-bar>

    <v-main>
      <!-- RouterView и FilterSheet без изменений -->
      <router-view />
      <FilterSheet />
    </v-main>
  </v-app>
</template>

<script setup>
import { useRouter } from 'vue-router';
import { useSettingsStore } from '@/stores/settings';
import { useAppBar } from '@/composables/useAppBar';
import { useFilters } from '@/composables/useFilters';
import FilterSheet from '@/components/FilterSheet.vue';

const settings = useSettingsStore();
const router = useRouter();
const { appBar, isDrawerOpen } = useAppBar();
const { selectedTags } = useFilters();

function navigateToCategory(tag) {
  // Обновляем фильтр
  selectedTags.value = tag ? [tag] : [];
  // Переходим на главную страницу
  router.push({ name: 'ItemsList' });
  // Закрываем меню
  isDrawerOpen.value = false;
}
</script>
```

### src/components/AboutView.vue
```
<template>
  <v-container>
    <v-card>
      <v-card-title class="text-h5">О приложении</v-card-title>
      <v-card-text>
        <p>Это приложение создано для личного сбора молитв и заметок.</p>
        <p class="mt-4">Версия: 1.0.0</p>
        <p>Разработано с любовью.</p>
      </v-card-text>
    </v-card>
  </v-container>
</template>

<script setup>
import { onMounted } from 'vue';
import { useAppBar } from '@/composables/useAppBar';
const { setAppBar } = useAppBar();
onMounted(() => {
  setAppBar({ title: 'О нас', showBackButton: true, isMenu: true });
});
</script>
```

### src/components/AdminView.vue
```
<template>
  <v-container>
    <v-card>
      <v-card-title class="text-h5">Админка</v-card-title>
      <v-card-text>
        <p>
          Здесь будет панель администратора.
          <br>
          Пока это лишь заготовка для будущих функций.
        </p>
        <v-alert type="warning" variant="outlined" class="mt-4">
          Сейчас приложение работает в локальном режиме. Любой пользователь может редактировать данные. Для реализации полноценного администрирования потребуется система аутентификации.
        </v-alert>
      </v-card-text>
    </v-card>
  </v-container>
</template>

<script setup>
import { onMounted } from 'vue';
import { useAppBar } from '@/composables/useAppBar';
const { setAppBar } = useAppBar();
onMounted(() => {
  setAppBar({ title: 'Админка', showBackButton: true, isMenu: true });
});
</script>
```

### src/components/Editor.vue
```
<template>
  <div v-if="editor" class="editor-container">
    <div class="editor-toolbar">
      <v-btn-toggle v-model="textStyle" mandatory density="compact" variant="outlined">
        <v-btn value="paragraph">{{ $t('style.normal') }}</v-btn>
        <v-btn value="heading-2">{{ $t('style.h2') }}</v-btn>
        <v-btn value="heading-3">{{ $t('style.h3') }}</v-btn>
        <v-btn value="rubric">{{ $t('style.rubric') }}</v-btn>
      </v-btn-toggle>

      <v-spacer></v-spacer>
      
      <v-btn-toggle density="compact" variant="outlined">
        <v-btn @click="editor.chain().focus().setTextAlign('left').run()" :class="{ 'v-btn--active': editor.isActive({ textAlign: 'left' }) }" icon="mdi-format-align-left"></v-btn>
        <v-btn @click="editor.chain().focus().setTextAlign('center').run()" :class="{ 'v-btn--active': editor.isActive({ textAlign: 'center' }) }" icon="mdi-format-align-center"></v-btn>
        <v-btn @click="editor.chain().focus().setTextAlign('justify').run()" :class="{ 'v-btn--active': editor.isActive({ textAlign: 'justify' }) }" icon="mdi-format-align-justify"></v-btn>
      </v-btn-toggle>
    </div>
    <editor-content :editor="editor" />
  </div>
</template>

<script setup>
import { ref, watch, onBeforeUnmount, onMounted } from 'vue';
import { useEditor, EditorContent } from '@tiptap/vue-3';
import StarterKit from '@tiptap/starter-kit';
import TextAlign from '@tiptap/extension-text-align';

const props = defineProps({ modelValue: { type: String, default: '' } });
const emit = defineEmits(['update:modelValue']);

const editor = useEditor({
  content: props.modelValue,
  extensions: [
    StarterKit.configure({ heading: { levels: [2, 3] } }),
    TextAlign.configure({ types: ['heading', 'paragraph'] }),
  ],
  onUpdate: () => { emit('update:modelValue', editor.value.getHTML()); },
});

const textStyle = ref('paragraph');

watch(() => props.modelValue, (value) => {
  if (editor.value && editor.value.getHTML() !== value) {
    editor.value.commands.setContent(value, false);
  }
});

watch(textStyle, (newStyle) => {
  if (!editor.value) return;
  const chain = editor.value.chain().focus();
  
  const isRubric = editor.value.getAttributes('paragraph').class === 'rubric';

  if (newStyle === 'paragraph') {
    chain.setParagraph().run();
  } else if (newStyle === 'heading-2') {
    chain.toggleHeading({ level: 2 }).run();
  } else if (newStyle === 'heading-3') {
    chain.toggleHeading({ level: 3 }).run();
  } else if (newStyle === 'rubric') {
    if (isRubric) {
        chain.setParagraph().run(); // Снимаем стиль
    } else {
        chain.setParagraph().setNode('paragraph', { class: 'rubric' }).run(); // Применяем
    }
  }
});

onBeforeUnmount(() => { if (editor.value) editor.value.destroy(); });
</script>
```

### src/components/FilterSheet.vue
```
<template>
  <v-bottom-sheet v-model="isFilterSheetOpen">
    <v-card class="pa-4">
      <v-card-title>{{ $t('filterByTags') }}</v-card-title>
      <v-card-text>
        <div v-if="allTags.length === 0" class="text-grey pa-2">Нет тегов для выбора</div>
        <v-chip-group v-else v-model="selectedTags" column multiple>
          <v-chip
            v-for="tag in allTags"
            :key="tag"
            :value="tag"
            filter
            variant="outlined"
            class="ma-1"
            size="large"
          >
            {{ tag }}
          </v-chip>
        </v-chip-group>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="primary" variant="text" @click="isFilterSheetOpen = false">{{ $t('done') }}</v-btn>
      </v-card-actions>
    </v-card>
  </v-bottom-sheet>
</template>

<script setup>
import { useAppBar } from '@/composables/useAppBar';
import { useFilters } from '@/composables/useFilters';
import { useItems } from '@/composables/useItems';

const { isFilterSheetOpen } = useAppBar();
const { selectedTags } = useFilters();
const { allTags } = useItems();
</script>
```

### src/components/ItemForm.vue
```
<template>
  <v-container>
    <v-form v-if="isFormReady" @submit.prevent="handleSave">
      <v-text-field v-model="form.title" :label="$t('title')" variant="outlined" class="mb-4"></v-text-field>
      <v-text-field v-model="form.source" :label="$t('source')" variant="outlined" class="mb-4" clearable></v-text-field>

      <v-tabs v-model="currentLangTab" bg-color="primary" class="mb-1">
        <v-tab value="be">Бел</v-tab>
        <v-tab value="ru">Рус</v-tab>
        <v-tab value="la">Lat</v-tab>
      </v-tabs>
      <v-window v-model="currentLangTab">
        <v-window-item value="be"><Editor v-model="form.textVersions.be" /></v-window-item>
        <v-window-item value="ru"><Editor v-model="form.textVersions.ru" /></v-window-item>
        <v-window-item value="la"><Editor v-model="form.textVersions.la" /></v-window-item>
      </v-window>

      <v-combobox
        v-model="form.tags" :items="allTags" :label="$t('tags')"
        multiple chips clearable variant="outlined" class="mt-4"
      ></v-combobox>

      <v-divider class="my-4"></v-divider>
      <h3 class="text-subtitle-1 mb-2">Связанные заметки</h3>
      <div v-if="form.linkedNoteIds && form.linkedNoteIds.length > 0" class="mb-3">
        <v-chip v-for="linkedNote in currentlyLinkedNotes" :key="linkedNote.id" class="mr-2 mb-2" closable @click:close="removeLink(linkedNote.id)">
          {{ linkedNote.title }}
        </v-chip>
      </div>
      <v-btn @click="isLinkDialogOpen = true" prepend-icon="mdi-link-plus">Добавить связь</v-btn>
    </v-form>
    
    <div v-else class="text-center mt-16"><v-progress-circular indeterminate color="primary"></v-progress-circular></div>

    <v-dialog v-model="isLinkDialogOpen" max-width="500px">
      <v-card>
        <v-card-title>Выберите заметку для связи</v-card-title>
        <v-list>
          <v-list-item v-for="note in availableNotesToLink" :key="note.id" :title="note.title" @click="addLink(note.id)"></v-list-item>
        </v-list>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script setup>
import { ref, watch, onMounted, onUnmounted, computed } from 'vue';
import { useRouter } from 'vue-router';
import { useItems } from '@/composables/useItems';
import { useAppBar } from '@/composables/useAppBar';
import Editor from '@/components/Editor.vue';
import { useI18n } from 'vue-i18n';

const props = defineProps({ id: { type: String, required: false } });
const router = useRouter();
const { t } = useI18n();
const { items, addItem, updateItem, allTags } = useItems();
const { setAppBar, resetAppBar } = useAppBar();
const isEditMode = computed(() => !!props.id);
const isFormReady = ref(false);
const currentLangTab = ref('be');

const form = ref({
  title: '',
  source: '',
  textVersions: { ru: '', be: '', la: '' },
  tags: [],
  linkedNoteIds: []
});

const isLinkDialogOpen = ref(false);
const currentlyLinkedNotes = computed(() => form.value.linkedNoteIds?.map(id => items.value.find(item => item.id === id)).filter(Boolean) || []);
const availableNotesToLink = computed(() => items.value.filter(item => item.id !== props.id && !form.value.linkedNoteIds?.includes(item.id)));
function addLink(noteId) { form.value.linkedNoteIds.push(noteId); isLinkDialogOpen.value = false; }
function removeLink(noteId) { form.value.linkedNoteIds = form.value.linkedNoteIds.filter(id => id !== noteId); }

async function handleSave() {
  if (!form.value.title) return;
  const dataToSave = {
    title: form.value.title,
    source: form.value.source || '',
    textVersions: form.value.textVersions,
    tags: form.value.tags,
    linkedNoteIds: form.value.linkedNoteIds || []
  };
  if (isEditMode.value) await updateItem(props.id, dataToSave);
  else await addItem(dataToSave);
  router.push({ name: 'ItemsList' });
}

onMounted(() => {
  setAppBar({
    title: isEditMode.value ? t('editing') : t('newNote'),
    showBackButton: true,
    actions: [{ icon: 'mdi-check', onClick: handleSave }]
  });
  if (isEditMode.value) {
    watch(items, (newItems) => {
      const itemToEdit = newItems.find(i => i.id === props.id);
      if (itemToEdit) {
        form.value = { ...itemToEdit, source: itemToEdit.source || '', tags: itemToEdit.tags || [], textVersions: itemToEdit.textVersions || {}, linkedNoteIds: itemToEdit.linkedNoteIds || [] };
        isFormReady.value = true;
      }
    }, { immediate: true });
  } else {
    isFormReady.value = true;
  }
});
onUnmounted(resetAppBar);
</script>
```

### src/components/ItemsList.vue
```
<template>
  <v-container>
    <div v-if="isLoading" class="text-center mt-16"><v-progress-circular indeterminate color="primary" size="64"></v-progress-circular></div>
    <div v-else>
      <div v-if="settings.viewMode === 'card'">
        <v-card v-for="item in sortedAndFilteredItems" :key="item.id" class="mb-4" elevation="2">
          <v-card-title class="font-weight-bold d-flex align-center">
            <v-btn :icon="settings.isPinned(item.id) ? 'mdi-pin' : 'mdi-pin-outline'" :color="settings.isPinned(item.id) ? 'primary' : 'grey'" variant="text" size="small" class="mr-2" @click.stop="settings.togglePin(item.id)"></v-btn>
            <span @click="viewItem(item.id)" class="flex-grow-1" style="cursor: pointer;">{{ item.title }}</span>
          </v-card-title>
          <v-card-text class="pb-0" @click="viewItem(item.id)" style="cursor: pointer;">
            <p class="mb-4 text-medium-emphasis">{{ getPreviewText(item) }}</p>
            <v-chip-group><v-chip v-for="tag in item.tags" :key="tag" size="small" color="primary" variant="tonal">{{ tag }}</v-chip></v-chip-group>
          </v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn color="grey-darken-1" variant="text" @click.stop="navigateToEdit(item.id)">{{ $t('edit') }}</v-btn>
            <v-btn color="error" variant="text" @click.stop="openDeleteDialog(item.id)">{{ $t('delete') }}</v-btn>
          </v-card-actions>
        </v-card>
      </div>
      <v-list v-else-if="settings.viewMode === 'compact'" lines="one" density="compact">
        <v-list-item v-for="item in sortedAndFilteredItems" :key="item.id" @click="viewItem(item.id)">
          <template v-slot:prepend>
            <v-btn :icon="settings.isPinned(item.id) ? 'mdi-pin' : 'mdi-pin-outline'" :color="settings.isPinned(item.id) ? 'primary' : 'grey'" variant="text" size="x-small" class="mr-2" @click.stop="settings.togglePin(item.id)"></v-btn>
          </template>
          <v-list-item-title>{{ item.title }}</v-list-item-title>
          <template v-slot:append>
            <v-btn icon="mdi-pencil" variant="text" size="small" @click.stop="navigateToEdit(item.id)"></v-btn>
            <v-btn icon="mdi-delete" variant="text" size="small" @click.stop="openDeleteDialog(item.id)"></v-btn>
          </template>
        </v-list-item>
      </v-list>
      <div v-if="!isLoading && sortedAndFilteredItems.length === 0" class="text-center text-grey-darken-1 mt-16">
        <v-icon size="48" class="mb-2">mdi-note-off-outline</v-icon>
        <p>{{ $t('noNotesFound') }}</p>
      </div>
    </div>
    <v-btn icon="mdi-plus" location="bottom right" size="large" color="surface" position="fixed" variant="elevated" elevation="8" class="ma-4" @click="router.push({ name: 'ItemAdd' })"><v-icon color="primary">mdi-plus</v-icon></v-btn>
    <v-dialog v-model="isDeleteDialogOpen" persistent max-width="400px">
      <v-card>
        <v-card-title class="text-h5">{{ $t('confirmDeletion') }}</v-card-title>
        <v-card-text>{{ $t('deleteConfirmationMessage', { title: itemToDelete ? itemToDelete.title : '' }) }}</v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn variant="text" @click="closeDeleteDialog">{{ $t('cancel') }}</v-btn>
          <v-btn color="error" variant="flat" @click="confirmDeletion">{{ $t('delete') }}</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted, watch } from 'vue';
import { useRouter } from 'vue-router';
import { useItems } from '@/composables/useItems';
import { useFilters } from '@/composables/useFilters';
import { useAppBar } from '@/composables/useAppBar';
import { useI18n } from 'vue-i18n';
import { useSettingsStore } from '@/stores/settings';

const router = useRouter();
const { t, locale } = useI18n(); // Получаем и t, и locale
const { items, deleteItem } = useItems();
const { search, selectedTags } = useFilters();
const { setAppBar, resetAppBar, isSearchActive, isFilterSheetOpen } = useAppBar();
const settings = useSettingsStore();
const isLoading = ref(true);
watch(items, (newItems) => { if (newItems) isLoading.value = false; }, { immediate: true });

const setupAppBar = () => {
  setAppBar({
    title: t('appTitle'),
    showBackButton: false,
    actions: [
      { icon: 'mdi-magnify', onClick: () => { isSearchActive.value = true; } },
      { icon: 'mdi-filter-variant', onClick: () => { isFilterSheetOpen.value = true; } },
    ]
  });
};
onMounted(setupAppBar);
onUnmounted(resetAppBar);

// ✅ ИСПРАВЛЕНО: Следим за изменением языка (locale), а не за функцией t
watch(locale, setupAppBar);

const isDeleteDialogOpen = ref(false);
const itemToDeleteId = ref(null);
const itemToDelete = computed(() => itemToDeleteId.value ? items.value.find(item => item.id === itemToDeleteId.value) : null);
function openDeleteDialog(id) { itemToDeleteId.value = id; isDeleteDialogOpen.value = true; }
function closeDeleteDialog() { isDeleteDialogOpen.value = false; itemToDeleteId.value = null; }
async function confirmDeletion() { if (itemToDeleteId.value) { await deleteItem(itemToDeleteId.value); } closeDeleteDialog(); }

function getPreviewText(item) {
  const htmlContent = item.textVersions?.be || item.textVersions?.ru || item.textVersions?.la || Object.values(item.textVersions || {}).find(v => v) || '';
  if (!htmlContent) return 'Нет содержимого';
  const doc = new DOMParser().parseFromString(htmlContent, 'text/html');
  const text = (doc.body.textContent || "").trim();
  return text.length > 150 ? text.substring(0, 150) + '...' : text;
}

const sortedAndFilteredItems = computed(() => {
  if (isLoading.value) return [];
  const searchLower = search.value.toLowerCase().trim();
  const filtered = items.value.filter(item => {
    const tagMatch = selectedTags.value.length === 0 || (item.tags && selectedTags.value.every(tag => item.tags.includes(tag)));
    if (!tagMatch) return false;
    if (searchLower) {
      const fullText = (item.title + ' ' + Object.values(item.textVersions || {}).join(' ')).toLowerCase();
      return fullText.includes(searchLower);
    }
    return true;
  });
  return filtered.slice().sort((a, b) => (settings.isPinned(b.id) - settings.isPinned(a.id)));
});

function viewItem(id) { router.push({ name: 'ItemView', params: { id } }); }
function navigateToEdit(id) { router.push({ name: 'ItemEdit', params: { id } }); }
</script>
```

### src/components/ItemView.vue
```
<template>
  <v-container>
    <div v-if="item">
      <h2 class="text-h4 font-weight-bold mb-4">{{ item.title }}</h2>
      <div v-for="(text, lang) in availableVersions" :key="lang" class="mb-4">
        <h2 class="text-h6 font-weight-medium text-grey-darken-1 mb-2">{{ langNames[lang] }}</h2>
        <div v-html="text" class="note-content-area ProseMirror"></div>
      </div>

      <div v-if="linkedNotes.length > 0" class="mt-8">
        <v-divider class="mb-4"></v-divider>
        <h3 class="text-subtitle-1 font-weight-bold mb-3">Связанные заметки:</h3>
        <v-list density="compact" class="pa-0">
          <v-list-item
            v-for="linkedNote in linkedNotes"
            :key="linkedNote.id"
            @click="router.push({ name: 'ItemView', params: { id: linkedNote.id } })"
            class="pa-0 mb-2"
          >
            <template v-slot:prepend><v-icon color="grey" class="mr-2">mdi-link-variant</v-icon></template>
            <v-list-item-title class="text-wrap font-weight-medium">{{ linkedNote.title }}</v-list-item-title>
          </v-list-item>
        </v-list>
      </div>

      <div class="mt-6 text-body-2 text-medium-emphasis">
        <div v-if="item.source">
          <v-divider class="my-3"></v-divider>
          <strong>Источник:</strong> {{ item.source }}
        </div>
        <div v-if="item.tags && item.tags.length > 0" class="mt-3">
          <strong>Теги:</strong> {{ item.tags.join(', ') }}
        </div>
      </div>
    </div>
    <div v-else class="text-center text-grey-darken-1 mt-16">
      <v-progress-circular indeterminate color="primary"></v-progress-circular>
    </div>
  </v-container>
</template>

<script setup>
import { computed, watch, onMounted, onUnmounted } from 'vue';
import { useRouter } from 'vue-router';
import { useItems } from '@/composables/useItems';
import { useAppBar } from '@/composables/useAppBar';

const props = defineProps({ id: { type: String, required: true } });
const router = useRouter();
const { items } = useItems();
const { setAppBar, resetAppBar } = useAppBar();

const item = computed(() => items.value.find(i => i.id === props.id));
const linkedNotes = computed(() => item.value?.linkedNoteIds?.map(id => items.value.find(note => note.id === id)).filter(Boolean) || []);
const availableVersions = computed(() => item.value ? Object.fromEntries(Object.entries(item.value.textVersions).filter(([_, v]) => v)) : {});
const langNames = { ru: 'Русский', be: 'Беларуская', la: 'Latina' };

const updateAppBarForItem = (currentItem) => {
  if (currentItem) {
    setAppBar({
      title: currentItem.title,
      showBackButton: true,
      actions: [{ icon: 'mdi-pencil', onClick: () => router.push({ name: 'ItemEdit', params: { id: currentItem.id } }) }]
    });
  }
};

watch(item, updateAppBarForItem, { immediate: true });
onUnmounted(resetAppBar);
</script>
```

### src/components/SettingsView.vue
```
<template>
  <v-container>
    <v-list lines="two" subheader>
      <v-list-subheader>{{ $t('appearance') }}</v-list-subheader>
      
      <v-list-item :title="$t('viewMode')" :subtitle="$t('viewModeHint')">
        <template v-slot:prepend><v-icon>mdi-view-dashboard-outline</v-icon></template>
        <template v-slot:append>
          <v-btn-toggle :model-value="settings.viewMode" @update:model-value="settings.toggleViewMode" mandatory variant="outlined" density="compact">
            <v-btn value="card"><v-icon>mdi-view-grid</v-icon></v-btn>
            <v-btn value="compact"><v-icon>mdi-view-list</v-icon></v-btn>
          </v-btn-toggle>
        </template>
      </v-list-item>

      <v-list-item :title="$t('darkTheme')" :subtitle="$t('themeIs', { themeName: $t('themeNames.' + settings.currentTheme) })">
        <template v-slot:prepend><v-icon>mdi-theme-light-dark</v-icon></template>
        <template v-slot:append><v-switch :model-value="settings.currentTheme === 'dark'" @update:model-value="settings.toggleTheme" inset color="primary" hide-details></v-switch></template>
      </v-list-item>
      
      <v-list-item :title="$t('fontSize')" :subtitle="$t('fontSizeHint')">
        <template v-slot:prepend><v-icon>mdi-format-font-size-increase</v-icon></template>
        <template v-slot:append>
          <div class="d-flex align-center">
            <v-btn icon="mdi-minus" variant="text" size="small" @click="settings.decreaseFontSize" :disabled="settings.fontSizeMultiplier <= 0.8"></v-btn>
            <span class="mx-2 font-weight-bold" style="width: 40px; text-align: center;">{{ Math.round(settings.fontSizeMultiplier * 100) }}%</span>
            <v-btn icon="mdi-plus" variant="text" size="small" @click="settings.increaseFontSize" :disabled="settings.fontSizeMultiplier >= 1.5"></v-btn>
          </div>
        </template>
      </v-list-item>
    </v-list>

    <v-divider class="my-4"></v-divider>
    <v-card variant="outlined" class="pa-4">
      <h3 class="v-list-subheader pa-0 mb-2">{{ $t('preview') }}</h3>
      <div class="note-content-area mt-2">
        <p class="text-body-1">Это пример обычного текста. Вы можете видеть, как он изменяется в реальном времени.</p>
        <p class="text-caption mt-2">А это — текст поменьше, для примера.</p>
      </div>
    </v-card>

    <v-divider class="my-4"></v-divider>
    <v-list>
      <v-list-subheader>{{ $t('language') }}</v-list-subheader>
      <v-list-item>
        <v-select
          :label="$t('language')" :items="[{value: 'ru', title: 'Русский'}, {value: 'be', title: 'Беларуская'}]"
          :model-value="settings.currentLanguage" @update:model-value="settings.setLanguage"
          variant="outlined" density="compact" hide-details
        ></v-select>
      </v-list-item>
    </v-list>

     <!-- ✅ --- НОВЫЙ РАЗДЕЛ: НАСТРОЙКА КАТЕГОРИЙ --- ✅ -->
    <v-divider class="my-4"></v-divider>
    <v-list-subheader>Категории в меню</v-list-subheader>
    <v-list-item v-for="(cat, index) in settings.menuCategories" :key="index">
      <v-list-item-title>{{ cat.name }}</v-list-item-title>
      <v-list-item-subtitle>Фильтр по тегу: `{{ cat.tag }}`</v-list-item-subtitle>
      <template v-slot:append>
        <v-btn icon="mdi-delete-outline" variant="text" color="grey" @click="settings.removeCategory(index)"></v-btn>
      </template>
    </v-list-item>
    
    <v-card variant="tonal" class="pa-4 mt-4">
      <h3 class="text-subtitle-1 mb-3">Добавить категорию</h3>
      <v-form @submit.prevent="onAddCategory">
        <v-text-field v-model="newCategory.name" label="Название категории" density="compact" variant="solo-filled" flat></v-text-field>
        <v-autocomplete
          v-model="newCategory.tag"
          :items="allTags"
          label="Выберите или введите тег"
          density="compact"
          variant="solo-filled"
          flat
          class="mt-2"
        ></v-autocomplete>
        <v-btn type="submit" color="primary" block class="mt-2">Добавить</v-btn>
      </v-form>
    </v-card>
  </v-container>
</template>

<script setup>
import { onMounted, ref } from 'vue';
import { useAppBar } from '@/composables/useAppBar';
import { useSettingsStore } from '@/stores/settings';
import { useItems } from '@/composables/useItems';
const { setAppBar } = useAppBar();
const settings = useSettingsStore();
const { allTags } = useItems(); // Получаем все доступные теги
const newCategory = ref({ name: '', tag: '' });
function onAddCategory() {
  settings.addCategory(newCategory.value);
  newCategory.value = { name: '', tag: '' }; // Сбрасываем форму
}
onMounted(() => {
  setAppBar({ title: 'Настройки', showBackButton: true });
});
</script>
```

### src/composables/useAppBar.js
```
import { ref } from 'vue';

const appBar = ref({
  title: 'Мои Молитвы',
  showBackButton: false,
  actions: [],
  isMenu: true // ✅ Флаг, показывать ли кнопку меню
});

const isDrawerOpen = ref(false); // ✅ Состояние для открытия/закрытия меню

export function useAppBar() {
  const setAppBar = (config) => {
    appBar.value.title = config.title || 'Мои Молитвы';
    appBar.value.showBackButton = config.showBackButton || false;
    appBar.value.actions = config.actions || [];
    // Если есть кнопка "назад", кнопка меню не нужна.
    appBar.value.isMenu = !config.showBackButton; 
  };
  
  const resetAppBar = () => { /* ... */ };

  return { appBar, isDrawerOpen, setAppBar, resetAppBar };
}
```

### src/composables/useFilters.js
```
import { ref } from 'vue';

// Создаем реактивные переменные для наших фильтров
const search = ref('');
const selectedTags = ref([]);

// Экспортируем функцию, которая будет предоставлять доступ
// к этим переменным в любом компоненте
export function useFilters() {
  return {
    search,
    selectedTags,
  };
}
```

### src/composables/useItems.js
```
import { ref } from 'vue';
import { db } from '@/firebase';
import { 
  collection, 
  onSnapshot, 
  addDoc, 
  deleteDoc, 
  updateDoc, 
  doc,
  serverTimestamp,
  query,
  orderBy
} from 'firebase/firestore';

const items = ref([]);
const allTags = ref([]);

const itemsCollection = collection(db, 'items');
// ✅ --- УБИРАЕМ СОРТИРОВКУ ПО isPinned ---
// Возвращаемся к простой сортировке только по дате создания.
const itemsQuery = query(itemsCollection, orderBy('createdAt', 'desc'));

onSnapshot(itemsQuery, (snapshot) => {
  items.value = snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  }));
  allTags.value = [...new Set(items.value.flatMap(item => item.tags || []))].sort();
});

export function useItems() {

  const addItem = async (data) => {
    // ✅ Убираем поле isPinned при создании, оно больше не нужно в базе
    const docRef = await addDoc(itemsCollection, {
      ...data,
      createdAt: serverTimestamp()
    });
    return docRef;
  };

  const deleteItem = async (id) => {
    await deleteDoc(doc(db, 'items', id));
  };

  const updateItem = async (id, data) => {
    const dataToUpdate = { ...data };
    delete dataToUpdate.id; 
    await updateDoc(doc(db, 'items', id), dataToUpdate);
  };

  // ✅ УДАЛЯЕМ функцию togglePin отсюда. Ее больше здесь нет.

  return {
    items,
    allTags,
    addItem,
    deleteItem,
    updateItem,
    // И не экспортируем ее.
  };
}
```

### src/export-code.js
```
const fs = require('fs');
const path = require('path');

// Список файлов и папок, которые мы хотим экспортировать
const pathsToExport = [
  'package.json',
  'vite.config.js',
  'src' // Экспортируем всю папку src
];

const outputFileName = 'project_code.txt';
let output = '';

// Функция для рекурсивного обхода папок
function readDirectory(dirPath) {
  const files = fs.readdirSync(dirPath);
  for (const file of files) {
    const filePath = path.join(dirPath, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      readDirectory(filePath); // Если это папка, идем глубже
    } else if (['.js', '.vue', '.css', '.json'].includes(path.extname(filePath))) {
      // Если это файл с нужным расширением, добавляем его в вывод
      const relativePath = path.relative(__dirname, filePath).replace(/\\/g, '/');
      output += `\n### ${relativePath}\n`;
      output += '```\n';
      output += fs.readFileSync(filePath, 'utf-8');
      output += '\n```\n';
    }
  }
}

// Основная логика
try {
  for (const p of pathsToExport) {
    const fullPath = path.join(__dirname, p);
    if (!fs.existsSync(fullPath)) continue;

    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      readDirectory(fullPath);
    } else {
      const relativePath = path.relative(__dirname, fullPath).replace(/\\/g, '/');
      output += `\n### ${relativePath}\n`;
      output += '```\n';
      output += fs.readFileSync(fullPath, 'utf-8');
      output += '\n```\n';
    }
  }

  fs.writeFileSync(outputFileName, output);
  console.log(`Проект успешно экспортирован в файл: ${outputFileName}`);
} catch (error) {
  console.error('Произошла ошибка при экспорте проекта:', error);
}
```

### src/firebase.js
```
import { initializeApp } from "firebase/app";
// ✅ 1. Импортируем initializeFirestore и persistentLocalCache
import { initializeFirestore, persistentLocalCache } from "firebase/firestore";

const firebaseConfig = {
  // ... ваша конфигурация Firebase без изменений ...
  apiKey: "AIzaSyDF2TD4MTcKiBChKRssauvL-nNyT4Am9N0",
  authDomain: "molitwy.firebaseapp.com",
  projectId: "molitwy",
  storageBucket: "molitwy.firebasestorage.app",
  messagingSenderId: "654293224787",
  appId: "1:654293224787:web:5f4fce64abf5ba1b1ea5a6"
};

const app = initializeApp(firebaseConfig);

// ✅ 2. Используем НОВЫЙ метод инициализации с настройками кэша
// Это заменяет и getFirestore(), и enableIndexedDbPersistence()
const db = initializeFirestore(app, {
  localCache: persistentLocalCache({
    // Можно добавить настройки, например, для работы в нескольких вкладках
    // tabManager: 'multi-tab' 
  })
});

// Экспортируем db, как и раньше
export { db };
```

### src/i18n.js
```
import { createI18n } from 'vue-i18n';
import ru from './locales/ru.json';
import be from './locales/be.json';

const savedLanguage = localStorage.getItem('language') || 'ru';

const i18n = createI18n({
  legacy: false, 
  locale: savedLanguage,
  fallbackLocale: 'ru',
  messages: {
    ru,
    be
  }
});

export default i18n;
```

### src/locales/be.json
```
{
  "appTitle": "Мае малітвы",
  "searchPlaceholder": "Пошук...",
  "filterByTags": "Фільтр па тэгах",
  "done": "Гатова",
  "edit": "Рэдагаваць",
  "delete": "Выдаліць",
  "pin": "Замацаваць",
  "unpin": "Адмацаваць",
  "noNotesFound": "Нататак не знойдзена",
  "confirmDeletion": "Пацвердзіце выдаленне",
  "deleteConfirmationMessage": "Вы ўпэўнены, што хочаце назаўсёды выдаліць нататку \"{title}\"?",
  "cancel": "Адмена",
  "title": "Назва",
  "source": "Крыніца",
  "tags": "Тэгі",
  "tagsHint": "Абярыце або ўвядзіце новыя тэгі",
  "editing": "Рэдагаванне",
  "newNote": "Новая нататка",
  "loading": "Загрузка...",
  "noteNotFound": "Нататка не знойдзена",
  "settings": "Налады",
  "appearance": "Знешні выгляд",
  "darkTheme": "Цёмная тэма",
  "themeIs": "Зараз выкарыстоўваецца {themeName} тэма",
  "themeNames": { "light": "светлая", "dark": "цёмная" },
  "fontSize": "Памер тэксту",
  "fontSizeHint": "Наладзьце памер шрыфту ў дадатку",
  "viewMode": "Выгляд спісу",
  "viewModeHint": "Карткі ці кампактны спіс",
  "preview": "Папярэдні прагляд",
  "language": "Мова",
  "textStyle": "Стыль тэксту",
  "allPrayers": "Все молитвы",
  "style": {
    "normal": "Звычайны",
    "h2": "Загаловак 1",
    "h3": "Загаловак 2",
    "rubric": "Рубрыка"
  }
}
```

### src/locales/ru.json
```
{
  "appTitle": "Мои молитвы",
  "searchPlaceholder": "Поиск...",
  "filterByTags": "Фильтр по тегам",
  "done": "Готово",
  "edit": "Редактировать",
  "delete": "Удалить",
  "pin": "Закрепить",
  "unpin": "Открепить",
  "noNotesFound": "Заметок не найдено",
  "confirmDeletion": "Подтвердите удаление",
  "deleteConfirmationMessage": "Вы уверены, что хотите навсегда удалить заметку \"{title}\"?",
  "cancel": "Отмена",
  "title": "Название",
  "source": "Источник",
  "tags": "Теги",
  "tagsHint": "Выберите или введите новые теги",
  "editing": "Редактирование",
  "newNote": "Новая заметка",
  "loading": "Загрузка...",
  "noteNotFound": "Заметка не найдена",
  "settings": "Настройки",
  "appearance": "Внешний вид",
  "darkTheme": "Тёмная тема",
  "themeIs": "Сейчас используется {themeName} тема",
  "themeNames": { "light": "светлая", "dark": "тёмная" },
  "fontSize": "Размер текста",
  "fontSizeHint": "Настройте размер шрифта в приложении",
  "viewMode": "Вид списка",
  "viewModeHint": "Карточки или компактный список",
  "preview": "Предпросмотр",
  "language": "Язык",
  "textStyle": "Стиль текста",
  "allPrayers": "Все молитвы",
  "style": {
    "normal": "Обычный",
    "h2": "Заголовок 1",
    "h3": "Заголовок 2",
    "rubric": "Рубрика"
  }
}
```

### src/main.js
```
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import vuetify from './plugins/vuetify'
import './firebase'; 
import '@mdi/font/css/materialdesignicons.css'
import { createPinia } from 'pinia'; 
import './styles/main.css'; // Убедитесь, что эта строка есть
import i18n from './i18n';

const pinia = createPinia(); 

createApp(App)
  .use(router)
  .use(vuetify)
  .use(pinia)
  .use(i18n)
  .mount('#app')
```

### src/plugins/vuetify.js
```

import 'vuetify/styles';
import { createVuetify } from 'vuetify';
import * as components from 'vuetify/components';
import * as directives from 'vuetify/directives';

export default createVuetify({
  components,
  directives,
});


```

### src/router/index.js
```
import { createRouter, createWebHistory } from 'vue-router';

const routes = [
  { path: '/', name: 'ItemsList', component: () => import('@/components/ItemsList.vue') },
  { path: '/item/:id', name: 'ItemView', component: () => import('@/components/ItemView.vue'), props: true },
  { path: '/edit/:id', name: 'ItemEdit', component: () => import('@/components/ItemForm.vue'), props: true },
  { path: '/add', name: 'ItemAdd', component: () => import('@/components/ItemForm.vue') },
  { path: '/settings', name: 'Settings', component: () => import('@/components/SettingsView.vue') },
  // ✅ --- НОВЫЕ МАРШРУТЫ --- ✅
  { path: '/about', name: 'About', component: () => import('@/components/AboutView.vue') },
  { path: '/admin', name: 'Admin', component: () => import('@/components/AdminView.vue') },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;
```

### src/stores/settings.js
```
import { defineStore } from 'pinia';
import { ref, watch } from 'vue';
import { useTheme } from 'vuetify';
import { useI18n } from 'vue-i18n';

// ✅ Значения по умолчанию для категорий
const defaultCategories = [
  { name: 'Основные молитвы', tag: 'основные' },
  { name: 'Марийные молитвы', tag: 'мария' }
];

export const useSettingsStore = defineStore('settings', () => {
  const theme = useTheme();
  const { locale } = useI18n();

  // ... (вся логика для темы, размера шрифта, языка, вида списка, закрепленных заметок остается без изменений) ...
  const currentTheme = ref(localStorage.getItem('theme') || 'light');
  theme.global.name.value = currentTheme.value;
  function toggleTheme() {
    currentTheme.value = currentTheme.value === 'light' ? 'dark' : 'light';
    theme.global.name.value = currentTheme.value;
    localStorage.setItem('theme', currentTheme.value);
  }
  const fontSizeMultiplier = ref(parseFloat(localStorage.getItem('fontSizeMultiplier')) || 1.0);
  watch(fontSizeMultiplier, (newMultiplier) => { document.documentElement.style.setProperty('--font-size-multiplier', newMultiplier); }, { immediate: true });
  function increaseFontSize() { if (fontSizeMultiplier.value < 1.5) fontSizeMultiplier.value += 0.1; }
  function decreaseFontSize() { if (fontSizeMultiplier.value > 0.8) fontSizeMultiplier.value -= 0.1; }
  const currentLanguage = ref(localStorage.getItem('language') || 'ru');
  locale.value = currentLanguage.value;
  function setLanguage(lang) { locale.value = lang; localStorage.setItem('language', lang); }
  const viewMode = ref(localStorage.getItem('viewMode') || 'card');
  function toggleViewMode() { viewMode.value = viewMode.value === 'card' ? 'compact' : 'card'; }
  const pinnedIds = ref(JSON.parse(localStorage.getItem('pinnedIds') || '[]'));
  watch(pinnedIds, (newIds) => { localStorage.setItem('pinnedIds', JSON.stringify(newIds)); }, { deep: true });
  function isPinned(noteId) { return pinnedIds.value.includes(noteId); }
  function togglePin(noteId) { /* ... */ }
  

  // ✅ --- НОВЫЙ БЛОК: УПРАВЛЕНИЕ КАТЕГОРИЯМИ МЕНЮ --- ✅
  const menuCategories = ref(
    JSON.parse(localStorage.getItem('menuCategories') || JSON.stringify(defaultCategories))
  );

  // Сохраняем любые изменения категорий в localStorage
  watch(menuCategories, (newCategories) => {
    localStorage.setItem('menuCategories', JSON.stringify(newCategories));
  }, { deep: true });

  function addCategory(category) {
    if (category && category.name && category.tag) {
      menuCategories.value.push(category);
    }
  }

  function removeCategory(index) {
    menuCategories.value.splice(index, 1);
  }

  return {
    currentTheme, toggleTheme,
    fontSizeMultiplier, increaseFontSize, decreaseFontSize,
    currentLanguage, setLanguage,
    viewMode, toggleViewMode,
    pinnedIds, isPinned, togglePin,
    // ✅ Экспортируем все для категорий
    menuCategories, addCategory, removeCategory
  };
});
```

### src/style.css
```

```

### src/styles/main.css
```
/* Базовый сброс и переменные */
:root {
  --font-size-multiplier: 1.0;
}

/* Стили для контента из редактора */
.note-content-area h2 {
  font-size: calc(1.75rem * var(--font-size-multiplier));
  line-height: 1.4;
  margin: 1.5em 0 0.5em;
  font-weight: 500;
}

.note-content-area h3 {
  font-size: calc(1.25rem * var(--font-size-multiplier));
  line-height: 1.4;
  margin: 1.5em 0 0.5em;
  font-weight: 500;
}

.note-content-area p {
  font-size: calc(1rem * var(--font-size-multiplier));
  line-height: 1.7;
  margin-bottom: 1em;
}

.note-content-area .rubric {
  color: rgb(var(--v-theme-error));
  font-style: italic;
  text-align: center;
}

/* Правило для выравнивания по ширине */
.note-content-area p[style*="text-align: justify;"],
.note-content-area h2[style*="text-align: justify;"],
.note-content-area h3[style*="text-align: justify;"] {
  text-align: justify;
}

/* Правило для переноса текста в заголовках карточек и списков */
.v-card-title, .v-list-item-title {
  white-space: normal !important;
  word-break: break-word;
  line-height: 1.4;
}

/* Убираем лишние отступы на мобильных устройствах */
@media (max-width: 600px) {
  .v-container {
    padding-left: 12px;
    padding-right: 12px;
  }
  .v-card-text {
    padding-left: 12px;
    padding-right: 12px;
  }
  .v-card-title {
    padding-left: 12px;
    padding-right: 12px;
  }
  .v-list-item {
    padding-left: 4px;
    padding-right: 4px;
  }
}

/* Дополнительные стили для редактора */
.editor-container {
  border: 1px solid rgba(var(--v-border-color), var(--v-border-opacity));
  border-radius: 4px;
}
.editor-toolbar {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  padding: 4px 8px;
  border-bottom: 1px solid rgba(var(--v-border-color), var(--v-border-opacity));
}
.editor-toolbar .v-btn.v-btn--active {
  background-color: rgba(var(--v-theme-primary), 0.1);
}
.ProseMirror {
  padding: 12px 16px;
  min-height: 200px;
  outline: none;
}
.ProseMirror p { margin-bottom: 0; }
.ProseMirror-focused { border-color: transparent; box-shadow: none; }
```
